import cosas2.*

object camion {
	const property cosas = []
	
	method tara() { return 1000} //Tara siempre es la misma.
	
	method limiteCarga() { return 2500 } //maxima capacidad del camion
	
	method cargar(unaCosa) {
		cosas.add(unaCosa)
		self.sufrirCambios()
	}
	
	method descargar(unaCosa) {
		cosas.remove(unaCosa)
	}
	
	method todoPesoPar() {
		return cosas.all({ cosa => cosa.peso() % 2 == 0 })
	}
	
	method hayAlgunoQuePesa(peso){
		return cosas.any( {cosa => cosa.peso() == peso })
	}
	
	method elDeNivel(nivel) {
		return cosas.find( {cosa => cosa.nivelPeligrosidad() == nivel })
	}
	

	method pesoTotal() {
		return cosas.sum({ cosa => cosa.peso() }) + self.tara()
	}
	
	method excedidoDePeso() {
		return self.pesoTotal () > self.limiteCarga()
	}
	
	method objetosQueSuperanPeligrosidad(nivel) {
		return cosas.filter({ cosa => cosa.nivelPeligrosidad() > nivel })
	}
	
	method objetosMasPeligrososQue(unaCosa) {
		return cosas.filter({ cosa => cosa.nivelPeligrosidad() > unaCosa.nivelPeligrosidad() })
	}
	
	method puedeCircularEnRuta(nivelMaximoPeligrosidad) {
		//Que no exceda el limite y que la coleccion que devuelve el metodo objetosQueSuperanPeligrosidad NO tenga elementos
		return not self.excedidoDePeso() and self.objetosQueSuperanPeligrosidad(nivelMaximoPeligrosidad).size() == 0
	}
	
	method tieneAlgoQuePesaEntre(min, max){
		return cosas.any({ cosa => cosa.peso().between(min,max)})
	}
	
	method cosaMasPesada(){
		return cosas.max({ cosa => cosa.peso() })
	}
	
	method pesos(){
		return cosas.map({ cosa => cosa.peso() })
	}
	
	//metodo para saber si en la coleccion tiene un objeto determinado recibido por parametro.
	method hayCargado(unaCosa){
		return cosas.contains(unaCosa)
	}
	
	/*
totalBultos(): la suma de la cantidad de bultos que está transportando. 
	* KnightRider, arena a granel y residuos radioactivos son 1 bulto. 
	* Bumblebee y embalaje de seguridad son dos. 
	* Paquete de ladrillos es 1 hasta 100 ladrillos, 2 de 101 a 300, 3 301 o más. 
	* Batería antiaérea: 1 si no tiene misiles, 2 si tiene. 
	* Contenedor portuario: 1 + los bultos que tiene adentro.
	* IMPLEMENTACION: Cada objeto sabrá que valor de Bulto tiene, por lo que, el metodo recorrerá
	* la coleccion recuperando por cada objeto ese valor y acumulandolo
	 */
	
	method totalBultos() {
		return cosas.sum({ cosa => cosa.bultos() })
	} 
	
	method sufrirCambios() { 
		cosas.forEach({ cosa => cosa.sufrirCambios() })
	}
}
